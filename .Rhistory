arrow = arrow_val,
size = 2.5,
data = graphdat %>% filter(source != target)) +
geom_curve(aes(x = xsource - offsetx * corr_fac,
y = ysource - offsety * corr_fac,
xend = xtarget + offsetx * corr_fac,
yend = ytarget + offsety * corr_fac),
curvature = .15,
arrow = arrow_val,
size = 2,
color = "white",
data = graphdat %>% filter(source != target)) +
geom_curve(aes(x = xsource - offsetx * corr_fac,
y = ysource - offsety * corr_fac,
xend = xtarget + offsetx * corr_fac,
yend = ytarget + offsety * corr_fac,
color = target,
alpha = weight),
curvature = .15,
arrow = arrow_val,
size = 2,
data = graphdat %>% filter(source != target)) +
geom_point(aes(x = xsource,
y = ysource,
size = 1),
pch = 21,
color = "black",
fill = "white",
data = graphdat %>% filter(source == target)) +
geom_point(aes(x = xsource,
y = ysource,
size = weight,
fill = source),
pch = 21,
color = "black",
data = graphdat %>% filter(source == target)) +
scale_radius(range = c(10, 40), limits = c(0, 1)) +
scale_alpha(range = c(0, 1)) +
coord_cartesian(xlim = c(-2, 2),
ylim = c(-2, 2)) +
guides(fill = FALSE, size = FALSE, color = FALSE, alpha = FALSE) +
geom_text(aes(label = round(weight, 2),
x = xsource,
y = ysource),
data = graphdat %>% filter(source == target)) +
geom_text(aes(label = paste("State", namevec[source]),
x = xsource,
y = ysource + .5 * sign(ysource)),
data = graphdat %>% filter(source == target),
fontface = "bold") +
geom_text(aes(label = round(weight, 2),
x = xpos,
y = ypos),
data = edgelabels)
ggplot() +
theme_void() +
geom_curve(aes(x = xsource - offsetx * corr_fac,
y = ysource - offsety * corr_fac,
xend = xtarget + offsetx * corr_fac,
yend = ytarget + offsety * corr_fac),
curvature = .15,
arrow = arrow_val,
size = 2.5,
data = graphdat %>% filter(source != target)) +
geom_curve(aes(x = xsource - offsetx * corr_fac,
y = ysource - offsety * corr_fac,
xend = xtarget + offsetx * corr_fac,
yend = ytarget + offsety * corr_fac),
curvature = .15,
arrow = arrow_val,
size = 2,
color = "white",
data = graphdat %>% filter(source != target)) +
geom_curve(aes(x = xsource - offsetx * corr_fac,
y = ysource - offsety * corr_fac,
xend = xtarget + offsetx * corr_fac,
yend = ytarget + offsety * corr_fac,
color = target,
alpha = weight),
curvature = .15,
arrow = arrow_val,
size = 2,
data = graphdat %>% filter(source != target)) +
geom_point(aes(x = xsource,
y = ysource,
size = 1),
pch = 21,
color = "black",
fill = "white",
data = graphdat %>% filter(source == target)) +
geom_point(aes(x = xsource,
y = ysource,
size = weight,
fill = source),
pch = 21,
color = "black",
data = graphdat %>% filter(source == target)) +
scale_radius(range = c(10, 40), limits = c(0, 1)) +
scale_alpha(range = c(0, 1)) +
coord_cartesian(xlim = c(-2, 2),
ylim = c(-2, 2)) +
guides(fill = FALSE, size = FALSE, color = FALSE, alpha = FALSE) +
geom_text(aes(label = round(weight, 2),
x = xsource,
y = ysource),
data = graphdat %>% filter(source == target)) +
geom_text(aes(label = paste("State", namevec[source]),
x = xsource,
y = ysource + .5 * sign(ysource)),
data = graphdat %>% filter(source == target),
fontface = "bold") +
geom_text(aes(label = round(weight, 2),
x = xpos,
y = ypos),
data = edgelabels)
runApp('STM_Dynamic')
selected_planting = "Baseline"
spei_val = 0
edge_df <- msmfits[msmfits$Planting == input$selected_planting &
msmfits$Precip == input$spei_val,] %>%
select(source, target, weight) %>% spread(target, weight)
msmfits$Planting
edge_df <- msmfits[msmfits$Planting == selected_planting &
msmfits$Precip == spei_val,] %>%
select(source, target, weight) %>% spread(target, weight)
msmfits[msmfits$Planting == selected_planting &
msmfits$Precip == spei_val,]
```{r}
planting_comp = data.frame(Planting = c("Baseline",
"Natives","Naturalized","Invasive",
"Native + Naturalized", "Native + Invasive", "Naturalized + Invasive",
"Native + Naturalized + Invasive"),
Natpri = c(0,1,0,0,1,1,0,1),
Exopri = c(0,0,1,0,1,0,1,1),
Invpri = c(0,0,0,1,0,1,1,1))
edgeoutput <- list()
counter <- 1
for(netprecip in seq(-2,2, by = .25)){
for(selected_planting in unique(planting_comp$Planting)){
ttable <- matrix(pmatrix.msm(msm.l1_priority,
covariates=list(l1fit = netprecip,
natives = planting_comp$Natpri[planting_comp$Planting == selected_planting],
annuals = planting_comp$Exopri[planting_comp$Planting == selected_planting],
waps = planting_comp$Invpri[planting_comp$Planting == selected_planting])),
nrow = 4)
rownames(ttable) = c("A", "B", "C", "D")
colnames(ttable) = c("A", "B", "C", "D")
edges = data.frame(ttable) %>%
rownames_to_column("source") %>%
gather(key = "target", value = "weight", -source)
edges = edges %>% mutate(Precip = netprecip,
Planting = selected_planting)
edgeoutput[[counter]] <- edges
counter = counter + 1
}
}
bind_rows(edgeoutput)
write.csv(x = bind_rows(edgeoutput),
"../data/msmfits.csv")
runApp('STM_Dynamic')
graphdat %>%
select(source, target, weight) %>%
filter(source != target)
runApp('STM_Dynamic')
runApp('STM_Dynamic')
runApp('STM_Dynamic')
runApp('STM_Dynamic')
shiny::runApp('STM_Dynamic')
msm.l1_priority
library("tidyverse")
library("igraph")
ttable <- data.frame(A = c(95, 10, 25, 19),
B = c(8, 50, 11, 21),
C = c(7, 30, 115, 7),
D = c(29, 29, 22, 76),
row.names = c("A", "B", "C", "D")) %>%
rownames_to_column("source")
edges = ttable %>%
gather(key = "target", value = "weight", -source) %>%
group_by(source) %>%
mutate(weight = weight / sum(weight)) %>%
select(source, target, weight)
nodes = data.frame(node_id = c("A", "B", "C", "D"),
cluster = c("I", "haven't", "assigned", "yet"),
stability = diag(as.matrix(ttable[,c(2:5)])) / rowSums(as.matrix(ttable[,c(2:5)])))
net = graph_from_data_frame(d = edges, vertices = nodes, directed = TRUE)
net = simplify(net, remove.loops = T)
colors = rainbow(4, v = .75, s = .3)
V(net)$color = colors
E(net)$width <- E(net)$weight * 40
V(net)$size <- (V(net)$stability * 100)
V(net)$label <- round(V(net)$stability, 2)
V(net)$label.font=2
E(net)$label.font=2
graph_attr(net, "layout") <- layout_with_lgl
pdf("../figures/stm_graph.pdf", height = 7, width = 7)
plot(net,
edge.arrow.size = 1.5,
edge.curved = .5,
vertex.label.family = "sans",
edge.label.family = "sans",
edge.label.color = "black",
vertex.label.color = "black",
edge.label = round(E(net)$weight, 2),
margin = c(.5,.1,0,.1),
edge.color = "grey70",
main = "State Resilience and Transition Probabilities",
cex = 1.25)
legend(x=-1.7, y=-1.5, c("State 1: E. glaucus - S.pulchra",
"State 2: F. perennis - B. hordeaceous",
"State 3: E. caput-medusae - A. triuncialis",
"State 4: A. fatua - B. diandrus"), pch=21,
col="#777777",
pt.bg=colors, pt.cex=2, cex=.8, bty="n", ncol=1)
dev.off()
library(lubridate); library(tidyverse); library(tidyquant)
library(msm)
clustdat <- read.csv("../data/WAPSclusters.csv",
header = TRUE,
stringsAsFactors = FALSE)
climate <- read.csv("../data/cimis_monthly.csv",
header = TRUE,
stringsAsFactors = FALSE)
climate_daily <- read.csv("../data/cimis_daily.csv",
header = TRUE,
stringsAsFactors = FALSE)
st = as.matrix(statetable.msm(cluster, plot, data = clustdat %>% arrange(plot, year)))
colnames(st) = c("Natives", "WetA", "WAPS", "DryA")
rownames(st) = c("Natives", "WetA", "WAPS", "DryA")
# Dummy vectors for priority effects
clustdat$waps = as.numeric(grepl("WAPS", clustdat$sp.trt))
clustdat$natives = as.numeric(grepl("natives", clustdat$sp.trt))
clustdat$annuals = as.numeric(grepl("annuals", clustdat$sp.trt))
# Defining initial matrix
Q <- rbind ( c(0, 0.333, 0.333, 0.333),
c(0.333, 0, 0.333, 0.333),
c(0.333, 0.333, 0, 0.333),
c(0.333, 0.333, 0.333, 0))
Q.crude <- crudeinits.msm(cluster ~ year, plot, data=clustdat, qmatrix=Q)
speidata <- read.csv("../data/SPEIfits.csv")
clustdat_t1 <- clustdat %>%
left_join((speidata %>% mutate(year = year + 1)), by = c("year" = "year"))
msm.l1_priority <- msm(cluster ~ year, plot, data=clustdat_t1, qmatrix=Q, obstype=2,
covariates = list("1-2" = ~ annuals + l1fit,
"1-3" = ~ waps + l1fit,
"1-4" = ~ annuals + l1fit,
"2-1" = ~ natives + l1fit,
"2-3" = ~ waps + l1fit,
"2-4" = ~ annuals + l1fit,
"3-1" = ~ natives + l1fit,
"3-2" = ~ annuals + l1fit,
"3-4" = ~ annuals + l1fit,
"4-1" = ~ natives + l1fit,
"4-2" = ~ annuals + l1fit,
"4-3" = ~ waps + l1fit))
planting_comp = data.frame(Planting = c("Baseline",
"Natives","Naturalized","Invasive",
"Native + Naturalized", "Native + Invasive", "Naturalized + Invasive",
"Native + Naturalized + Invasive"),
Natpri = c(0,1,0,0,1,1,0,1),
Exopri = c(0,0,1,0,1,0,1,1),
Invpri = c(0,0,0,1,0,1,1,1))
edgeoutput <- list()
counter <- 1
for(netprecip in seq(-2,2, by = .25)){
for(selected_planting in unique(planting_comp$Planting)){
ttable <- matrix(pmatrix.msm(msm.l1_priority,
covariates=list(l1fit = netprecip,
natives = planting_comp$Natpri[planting_comp$Planting == selected_planting],
annuals = planting_comp$Exopri[planting_comp$Planting == selected_planting],
waps = planting_comp$Invpri[planting_comp$Planting == selected_planting])),
nrow = 4)
rownames(ttable) = c("A", "B", "C", "D")
colnames(ttable) = c("A", "B", "C", "D")
edges = data.frame(ttable) %>%
rownames_to_column("source") %>%
gather(key = "target", value = "weight", -source)
edges = edges %>% mutate(Precip = netprecip,
Planting = selected_planting)
edgeoutput[[counter]] <- edges
counter = counter + 1
}
}
write.csv(x = bind_rows(edgeoutput),
"../data/msmfits.csv")
msm.l1_priority
runApp('STM_Dynamic')
msm.l1_priority
pmatrix.msm(msm.l1_priority)
pmatrix.msm(msm.l1_priority)
qmatrix.msm(msm.l1_priority)
exp(qmatrix.msm(msm.l1_priority))
as.matrix(qmatrix.msm(msm.l1_priority))
matrix(qmatrix.msm(msm.l1_priority))
qmatrix.msm(msm.l1_priority)
pmatrix.msm(msm.l1_priority)
for(netprecip in seq(-2,2, by = .25)){
for(selected_planting in unique(planting_comp$Planting)){
ttable <- matrix(pmatrix.msm(msm.l1_priority,
covariates=list(l1fit = netprecip,
natives = planting_comp$Natpri[planting_comp$Planting == selected_planting],
annuals = planting_comp$Exopri[planting_comp$Planting == selected_planting],
waps = planting_comp$Invpri[planting_comp$Planting == selected_planting])),
nrow = 4)
rownames(ttable) = c("A", "B", "C", "D")
colnames(ttable) = c("A", "B", "C", "D")
edges = data.frame(ttable) %>%
rownames_to_column("source") %>%
gather(key = "target", value = "weight", -source)
edges = edges %>% mutate(Precip = netprecip,
Planting = selected_planting)
edgeoutput[[counter]] <- edges
counter = counter + 1
}
}
pmatrix.msm(msm.l1_priority)
qmatrix.msm(msm.l1_priority)
hazard.msm(msm.l1_priority)
exp(-.29421)
pmatrix.msm(msm.l1_priority)
exp(.16780)
exp(-.16780)
exp(-(1 - .16780))
qmatrix.msm(msm.l1_priority)
pmatrix.msm(msm.l1_priority)
exp(-.16780)
1 0 exp(-.16780)
1 - exp(-.16780)
pmatrix.msm(msm.l1_priority. qmatrix = qmatrix.msm(msm.l1_priority))
pmatrix.msm(msm.l1_priority, qmatrix = qmatrix.msm(msm.l1_priority))
pmatrix.msm(msm.l1_priority, covariates = 0)
plot_stm <- function(edges){
starts <- data.frame(source = as.character(c("A", "B", "C", "D")),
xsource = c(-1, 1, -1, 1),
ysource = c(1, 1, -1, -1))
ends <- data.frame(target = as.character(c("A", "B", "C", "D")),
xtarget = c(-1, 1, -1, 1),
ytarget = c(1, 1, -1, -1))
graphdat <- edges %>%
mutate(source = as.character(source), target = as.character(target)) %>%
full_join(starts, by = "source") %>%
full_join(ends, by = "target") %>%
mutate(offsetx = xsource - xtarget,
offsety = ysource - ytarget) %>%
mutate(offsetx = case_when(offsetx != 0 & offsety != 0 ~ offsetx * cos(pi/4),
TRUE ~ as.numeric(offsetx)),
offsety = case_when(offsetx != 0 & offsety != 0 ~ offsety * cos(pi/4),
TRUE ~ as.numeric(offsety)))
edgelabels <- graphdat %>%
select(source, target, weight) %>%
filter(source != target) %>%
bind_cols(data.frame(
xpos = c(0, -.75, .5,
0, -.15, 1.25,
-1.25, .15, 0,
-.5, .75, 0),
ypos = c(1.2, 0, -.15,
.8, -.5, 0,
0, .5, -.8,
.15, 0, -1.2)
))
namevec <- c(1,2,3,4)
names(namevec) <- c("A", "B", "C", "D")
# Creating figure
corr_fac <- .2
arrow_val <- arrow(length=unit(0.75,"cm"), angle = 15, ends="last", type = "closed")
ggplot() +
theme_void() +
geom_curve(aes(x = xsource - offsetx * corr_fac,
y = ysource - offsety * corr_fac,
xend = xtarget + offsetx * corr_fac,
yend = ytarget + offsety * corr_fac),
curvature = .15,
arrow = arrow_val,
size = 2.5,
data = graphdat %>% filter(source != target)) +
geom_curve(aes(x = xsource - offsetx * corr_fac,
y = ysource - offsety * corr_fac,
xend = xtarget + offsetx * corr_fac,
yend = ytarget + offsety * corr_fac),
curvature = .15,
arrow = arrow_val,
size = 2,
color = "white",
data = graphdat %>% filter(source != target)) +
geom_curve(aes(x = xsource - offsetx * corr_fac,
y = ysource - offsety * corr_fac,
xend = xtarget + offsetx * corr_fac,
yend = ytarget + offsety * corr_fac,
color = target,
alpha = weight),
curvature = .15,
arrow = arrow_val,
size = 2,
data = graphdat %>% filter(source != target)) +
geom_point(aes(x = xsource,
y = ysource,
size = 1),
pch = 21,
color = "black",
fill = "white",
data = graphdat %>% filter(source == target)) +
geom_point(aes(x = xsource,
y = ysource,
size = weight,
fill = source),
pch = 21,
color = "black",
data = graphdat %>% filter(source == target)) +
scale_radius(range = c(10, 40), limits = c(0, 1)) +
scale_alpha(range = c(0, 1)) +
coord_cartesian(xlim = c(-2, 2),
ylim = c(-2, 2)) +
guides(fill = FALSE, size = FALSE, color = FALSE, alpha = FALSE) +
geom_text(aes(label = round(weight, 2),
x = xsource,
y = ysource),
data = graphdat %>% filter(source == target)) +
geom_text(aes(label = paste("State", namevec[source]),
x = xsource,
y = ysource + .5 * sign(ysource)),
data = graphdat %>% filter(source == target),
fontface = "bold") +
geom_text(aes(label = round(weight, 2),
x = xpos,
y = ypos),
data = edgelabels)
# nodes = data.frame(node_id = c("A", "B", "C", "D"),
#                  cluster = c("I", "haven't", "assigned", "yet"),
#                  stability = edges$weight[edges$source == edges$target])
#
# net = graph_from_data_frame(d = edges, vertices = nodes, directed = TRUE)
# net = simplify(net, remove.loops = T)
#
# colors = rainbow(4, v = .75, s = .3)
# V(net)$color = colors
# E(net)$width <- E(net)$weight * 40
# V(net)$size <- (V(net)$stability * 100)
# V(net)$label <- round(V(net)$stability, 2)
# V(net)$label.font=2
# E(net)$label.font=2
#
# graph_attr(net, "layout") <- layout_with_lgl(net)
#
# plot(net,
#      edge.arrow.size = 1.5,
#      edge.curved = .5,
#      vertex.label.family = "sans",
#      edge.label.family = "sans",
#      edge.label.color = "black",
#      vertex.label.color = "black",
#      edge.label = round(E(net)$weight, 2),
#      margin = c(.5,.1,0,.1),
#      edge.color = "grey70",
#      main = "State Resilience and Transition Probabilities",
#      cex = 1.25,
#      layout = matrix(c(1,1,-1,1,1,-1,-1,-1),
#                      nrow = 4,
#                      byrow = TRUE),
#      margin = c(-1,-1,-1,-1))
#
# legend(x=-1.7, y=-1.5, c("State 1: E. glaucus - S.pulchra",
#                          "State 2: F. perennis - B. hordeaceous",
#                          "State 3: E. caput-medusae - A. triuncialis",
#                          "State 4: A. fatua - B. diandrus"), pch=21,
#        col="#777777",
#        pt.bg=colors, pt.cex=2, cex=.8, bty="n", ncol=1)
}
msmfits
ttable <- matrix(pmatrix.msm(msm.l1_priority),
nrow = 4)
rownames(ttable) = c("A", "B", "C", "D")
colnames(ttable) = c("A", "B", "C", "D")
edges = data.frame(ttable) %>%
rownames_to_column("source") %>%
gather(key = "target", value = "weight", -source)
edges = edges %>% mutate(Precip = netprecip,
Planting = selected_planting)
edges
matrix(pmatrix.msm(msm.l1_priority),
nrow = 4)
stmhelper(ttable)
plot_stm (ttable)
plot_stm(ttable)
ttable
plot_stm(edges)
ggsave(plot_stm(edges),
"../figures/stm_baseline",
height = 7, width = 8)
plot_stm(edges)
ggsave(
"../figures/stm_baseline",
height = 7, width = 8)
ggsave("../figures/stm_baseline",
height = 7, width = 8)
plot_stm(edges)
ggsave("../figures/stm_baseline",
height = 7, width = 8)
newplot <- plot_stm(edges)
ggsave(newplot,
"../figures/stm_baseline",
height = 7, width = 8)
?ggsave
ggsave(newplot,
filename = "../figures/stm_baseline",
height = 7, width = 8)
ggsave(plot = newplot,
filename = "../figures/stm_baseline",
height = 7, width = 8)
ggsave(plot = newplot,
filename = "../figures/stm_baseline.pdf",
height = 7, width = 8)
