"Cluster 3" = cols[3],
"Cluster 4" = cols[4]),
labels = c('E. glaucus - S. pulchra',
'F. perennis - B. hordeaceous',
'E. caput-medusae - A. triuncialis',
'A. fatua - B. diandrus')) +
scale_shape_manual(name = 'State Assignment',
values =c("Cluster 1" = 21,
"Cluster 2" = 22,
"Cluster 3" = 23,
"Cluster 4" = 24),
labels = c('E. glaucus - S. pulchra',
'F. perennis - B. hordeaceous',
'E. caput-medusae - A. triuncialis',
'A. fatua - B. diandrus')) +
xlim(1990, 2019) +
geom_vline(xintercept = 2008.5, color = "black", size = 1) +
geom_vline(xintercept = 2007.5, color = "black", size = 1) +
ylab(NULL) +
xlab("Year") +
ylim(0, 57) +
theme(axis.text.y = element_blank())
clustdat %>% ggplot(aes(x = year,
y = as.numeric(plot) - .5)) +
theme_bw() +
geom_point(aes(shape = cluster, fill = cluster), size =2) +
# geom_hline(yintercept = c(seq(0, 56, by = 8)), size = 2) +
geom_text(label = unique(clustdat$sp.trt),
data = data.frame(year = rep(1999, 7),
plot = seq(4, 52, by = 8)),
fontface = "bold") +
scale_fill_manual(name = 'State Assignment',
values =c("Cluster 1" = cols[1],
"Cluster 2" = cols[2],
"Cluster 3" = cols[3],
"Cluster 4" = cols[4]),
labels = c('E. glaucus - S. pulchra',
'F. perennis - B. hordeaceous',
'E. caput-medusae - A. triuncialis',
'A. fatua - B. diandrus')) +
scale_shape_manual(name = 'State Assignment',
values =c("Cluster 1" = 21,
"Cluster 2" = 22,
"Cluster 3" = 23,
"Cluster 4" = 24),
labels = c('E. glaucus - S. pulchra',
'F. perennis - B. hordeaceous',
'E. caput-medusae - A. triuncialis',
'A. fatua - B. diandrus')) +
xlim(1990, 2019) +
geom_vline(xintercept = 2008.5, color = "black", size = 1) +
geom_vline(xintercept = 2007.5, color = "black", size = 1) +
ylab(NULL) +
xlab("Year") +
ylim(0, 57) +
theme(axis.text.y = element_blank())
library(lubridate); library(tidyverse); library(tidyquant)
library(msm)
clustdat <- read.csv("../data/WAPSclusters.csv",
header = TRUE,
stringsAsFactors = FALSE)
climate <- read.csv("../data/cimis_monthly.csv",
header = TRUE,
stringsAsFactors = FALSE)
climate_daily <- read.csv("../data/cimis_daily.csv",
header = TRUE,
stringsAsFactors = FALSE)
st = as.matrix(statetable.msm(cluster, plot, data = clustdat %>% arrange(plot, year)))
colnames(st) = c("Natives", "WetA", "WAPS", "DryA")
rownames(st) = c("Natives", "WetA", "WAPS", "DryA")
# Dummy vectors for priority effects
clustdat$waps = as.numeric(grepl("WAPS", clustdat$sp.trt))
clustdat$natives = as.numeric(grepl("natives", clustdat$sp.trt))
clustdat$annuals = as.numeric(grepl("annuals", clustdat$sp.trt))
# Defining initial matrix
Q <- rbind ( c(0, 0.333, 0.333, 0.333),
c(0.333, 0, 0.333, 0.333),
c(0.333, 0.333, 0, 0.333),
c(0.333, 0.333, 0.333, 0))
Q.crude <- crudeinits.msm(cluster ~ year, plot, data=clustdat, qmatrix=Q)
# Base model
msm.null <- msm(cluster ~ year, plot, data=clustdat, qmatrix=Q, obstype=2)
speidata <- read.csv("../data/SPEIfits.csv")
colnames(speidata)
clustdat_t1 <- clustdat %>%
left_join((speidata %>% mutate(year = year + 1)), by = c("year" = "year"))
msm.l1_priority <- msm(cluster ~ year, plot, data=clustdat_t1, qmatrix=Q, obstype=2,
covariates = list("1-2" = ~ annuals + l1fit,
"1-3" = ~ waps + l1fit,
"1-4" = ~ annuals + l1fit,
"2-1" = ~ natives + l1fit,
"2-3" = ~ waps + l1fit,
"2-4" = ~ annuals + l1fit,
"3-1" = ~ natives + l1fit,
"3-2" = ~ annuals + l1fit,
"3-4" = ~ annuals + l1fit,
"4-1" = ~ natives + l1fit,
"4-2" = ~ annuals + l1fit,
"4-3" = ~ waps + l1fit))
msm.l1_priority
qmatrix.msm(msm.l1_priority)
pmatrix.msm(msm.l1_priority)
ttable <- data.frame(A = c(95, 10, 25, 19),
B = c(8, 50, 11, 21),
C = c(7, 30, 115, 7),
D = c(29, 29, 22, 76),
row.names = c("A", "B", "C", "D")) %>%
rownames_to_column("source")
ttable
ttable <- data.frame(A = c(95, 10, 25, 19),
B = c(8, 50, 11, 21),
C = c(7, 30, 115, 7),
D = c(29, 29, 22, 76),
row.names = c("A", "B", "C", "D")) %>%
rownames_to_column("source")
edges = ttable %>%
gather(key = "target", value = "weight", -source) %>%
group_by(source) %>%
mutate(weight = weight / sum(weight)) %>%
select(source, target, weight)
edges
ttable <- pmatrix.msm(msm.l1_priority)
edges = ttable %>%
gather(key = "target", value = "weight", -source) %>%
group_by(source) %>%
mutate(weight = weight / sum(weight)) %>%
select(source, target, weight)
ttable <- as.matrix(pmatrix.msm(msm.l1_priority))
edges = ttable %>%
gather(key = "target", value = "weight", -source) %>%
group_by(source) %>%
mutate(weight = weight / sum(weight)) %>%
select(source, target, weight)
ttable <- as.matrix(pmatrix.msm(msm.l1_priority))
ttable
ttable <- data.frame(as.matrix(pmatrix.msm(msm.l1_priority)))
ttable <- matrix(pmatrix.msm(msm.l1_priority))
ttable
ttable <- pmatrix.msm(msm.l1_priority)
str(ttable)
ttable <- pmatrix.msm(msm.l1_priority)
str(ttable)
ttable
matrix(ttable, nrow = 4)
rownames(ttable) = c("A", "B", "C", "D")
colnames(ttable) = c("A", "B", "C", "D")
ttable
edges = ttable %>%
gather(key = "target", value = "weight", -source) %>%
group_by(source) %>%
mutate(weight = weight / sum(weight)) %>%
select(source, target, weight)
ttable <- matrix(ttable, nrow = 4)
rownames(ttable) = c("A", "B", "C", "D")
colnames(ttable) = c("A", "B", "C", "D")
edges = ttable %>%
gather(key = "target", value = "weight", -source) %>%
group_by(source) %>%
mutate(weight = weight / sum(weight)) %>%
select(source, target, weight)
typeof(ttable)
ttable
data.frame(ttable)
edges = data.frame(ttable) %>%
gather(key = "target", value = "weight", -source) %>%
group_by(source) %>%
mutate(weight = weight / sum(weight)) %>%
select(source, target, weight)
data.frame(ttable)
edges = data.frame(ttable) %>%
rownames_to_column("source") %>%
gather(key = "target", value = "weight", -source)
edges
nodes = data.frame(node_id = c("A", "B", "C", "D"),
cluster = c("I", "haven't", "assigned", "yet"),
stability = diag(as.matrix(ttable[,c(2:5)])) / rowSums(as.matrix(ttable[,c(2:5)])))
diag(as.matrix(ttable[,c(2:5)]))
ttable
nodes = data.frame(node_id = c("A", "B", "C", "D"),
cluster = c("I", "haven't", "assigned", "yet"),
stability = diag(ttable))
net = graph_from_data_frame(d = edges, vertices = nodes, directed = TRUE)
library("tidyverse")
library("igraph")
net = graph_from_data_frame(d = edges, vertices = nodes, directed = TRUE)
net = simplify(net, remove.loops = T)
edges = data.frame(ttable) %>%
rownames_to_column("source") %>%
gather(key = "target", value = "weight", -source)
nodes = data.frame(node_id = c("A", "B", "C", "D"),
cluster = c("I", "haven't", "assigned", "yet"),
stability = diag(ttable))
net = graph_from_data_frame(d = edges, vertices = nodes, directed = TRUE)
net = simplify(net, remove.loops = T)
colors = rainbow(4, v = .75, s = .3)
V(net)$color = colors
E(net)$width <- E(net)$weight * 40
V(net)$size <- (V(net)$stability * 100)
V(net)$label <- round(V(net)$stability, 2)
V(net)$label.font=2
E(net)$label.font=2
graph_attr(net, "layout") <- layout_with_lgl
pdf("../figures/stm_graph_modfits.pdf", height = 7, width = 7)
plot(net,
edge.arrow.size = 1.5,
edge.curved = .5,
vertex.label.family = "sans",
edge.label.family = "sans",
edge.label.color = "black",
vertex.label.color = "black",
edge.label = round(E(net)$weight, 2),
margin = c(.5,.1,0,.1),
edge.color = "grey70",
main = "State Resilience and Transition Probabilities",
cex = 1.25)
legend(x=-1.7, y=-1.5, c("State 1: E. glaucus - S.pulchra",
"State 2: F. perennis - B. hordeaceous",
"State 3: E. caput-medusae - A. triuncialis",
"State 4: A. fatua - B. diandrus"), pch=21,
col="#777777",
pt.bg=colors, pt.cex=2, cex=.8, bty="n", ncol=1)
dev.off()
plot(net,
edge.arrow.size = 1.5,
edge.curved = .5,
vertex.label.family = "sans",
edge.label.family = "sans",
edge.label.color = "black",
vertex.label.color = "black",
edge.label = round(E(net)$weight, 2),
margin = c(.5,.1,0,.1),
edge.color = "grey70",
main = "State Resilience and Transition Probabilities",
cex = 1.25)
plot(net,
edge.arrow.size = 1.5,
edge.curved = .5,
vertex.label.family = "sans",
edge.label.family = "sans",
edge.label.color = "black",
vertex.label.color = "black",
edge.label = round(E(net)$weight, 2),
margin = c(.5,.1,0,.1),
edge.color = "grey70",
main = "State Resilience and Transition Probabilities",
cex = 1.25)
ttable <- matrix(pmatrix.msm(msm.l1_priority), nrow = 4)
rownames(ttable) = c("A", "B", "C", "D")
colnames(ttable) = c("A", "B", "C", "D")
Nprob = list()
counter = 1
for(pri in c(0:1)){
for(netprecip in seq(-1.5, 1.5, by = .1)){
qm = as.matrix(qmatrix.msm(msm.l1_priority, covariates=list(l1fit = netprecip,
natives = pri, annuals = pri, waps = pri))$estimates)
ql = as.matrix(qmatrix.msm(msm.l1_priority, covariates=list(l1fit = netprecip,
natives = pri, annuals = pri, waps = pri))$L)
qu = as.matrix(qmatrix.msm(msm.l1_priority, covariates=list(l1fit = netprecip,
natives = pri, annuals = pri, waps = pri))$U)
qdf = data.frame(qm) %>% mutate(From = rownames(qm)) %>%
gather("key" = "To", "value" = "Trans", -From) %>%
mutate(To = gsub("\\.", " ", To))
qlow = data.frame(ql) %>% mutate(From = rownames(ql)) %>%
gather("key" = "To", "value" = "Lower", -From) %>%
mutate(To = gsub("\\.", " ", To))
qupp = data.frame(qu) %>% mutate(From = rownames(qu)) %>%
gather("key" = "To", "value" = "Upper", -From) %>%
mutate(To = gsub("\\.", " ", To))
qdf$Trans = if_else(qdf$From == qdf$To, exp(qdf$Trans), 1 - exp(-qdf$Trans))
qlow$Lower = if_else(qlow$From == qlow$To, exp(qlow$Lower), 1 - exp(-qlow$Lower))
qupp$Upper = if_else(qupp$From == qupp$To, exp(qupp$Upper), 1 - exp(-qupp$Upper))
output <- left_join(qdf, qlow) %>% left_join(qupp)
output$precip = rep(netprecip, nrow(output))
output$priority = rep(pri, nrow(output))
Nprob[[counter]] <- output
counter = counter + 1
}
}
bind_rows(Nprob)
pri = 0
netprecip = 0
ttable <- matrix(pmatrix.msm(msm.l1_priority,
covariates=list(l1fit = netprecip,
natives = pri, annuals = pri, waps = pri)),
nrow = 4)
ttable
pmatrix.msm(msm.l1_priority
)
planting_comp = data.frame(Planting = c("Natives","Naturalized","Invasive",
"Native + Naturalized", "Native + Invasive", "Naturalized + Invasive",
"Native + Naturalized + Invasive"),
Natpri = c(1,0,0,1,1,0,1),
Exopri = c(0,1,0,1,0,1,1),
Invpri = c(0,0,1,0,1,1,1))
edgeoutput <- list()
counter <- 1
for(netprecip in seq(-2,2)){
for(selected_planting in unique(planting_comp$Planting)){
ttable <- matrix(pmatrix.msm(msm.l1_priority,
covariates=list(l1fit = netprecip,
natives = planting_comp$Natpri[Planting == selected_planting],
annuals = planting_comp$Exopri[Planting == selected_planting],
waps = planting_comp$Invpri[Planting == selected_planting])),
nrow = 4)
rownames(ttable) = c("A", "B", "C", "D")
colnames(ttable) = c("A", "B", "C", "D")
edges = data.frame(ttable) %>%
rownames_to_column("source") %>%
gather(key = "target", value = "weight", -source)
edges = edges %>% mutate(Precip = netprecip,
Planting = selected_planting)
edgeoutput[[counter]] <- edges
counter = counter + 1
}
}
planting_comp = data.frame(Planting = c("Natives","Naturalized","Invasive",
"Native + Naturalized", "Native + Invasive", "Naturalized + Invasive",
"Native + Naturalized + Invasive"),
Natpri = c(1,0,0,1,1,0,1),
Exopri = c(0,1,0,1,0,1,1),
Invpri = c(0,0,1,0,1,1,1))
edgeoutput <- list()
counter <- 1
for(netprecip in seq(-2,2)){
for(selected_planting in unique(planting_comp$Planting)){
ttable <- matrix(pmatrix.msm(msm.l1_priority,
covariates=list(l1fit = netprecip,
natives = planting_comp$Natpri[Planting == selected_planting],
annuals = planting_comp$Exopri[Planting == selected_planting],
waps = planting_comp$Invpri[Planting == selected_planting])),
nrow = 4)
rownames(ttable) = c("A", "B", "C", "D")
colnames(ttable) = c("A", "B", "C", "D")
edges = data.frame(ttable) %>%
rownames_to_column("source") %>%
gather(key = "target", value = "weight", -source)
edges = edges %>% mutate(Precip = netprecip,
Planting = selected_planting)
edgeoutput[[counter]] <- edges
counter = counter + 1
}
}
```{r}
planting_comp = data.frame(Planting = c("Natives","Naturalized","Invasive",
"Native + Naturalized", "Native + Invasive", "Naturalized + Invasive",
"Native + Naturalized + Invasive"),
Natpri = c(1,0,0,1,1,0,1),
Exopri = c(0,1,0,1,0,1,1),
Invpri = c(0,0,1,0,1,1,1))
edgeoutput <- list()
counter <- 1
for(netprecip in seq(-2,2)){
for(selected_planting in unique(planting_comp$Planting)){
ttable <- matrix(pmatrix.msm(msm.l1_priority,
covariates=list(l1fit = netprecip,
natives = planting_comp$Natpri[planting_comp$Planting == selected_planting],
annuals = planting_comp$Exopri[planting_comp$Planting == selected_planting],
waps = planting_comp$Invpri[planting_comp$Planting == selected_planting])),
nrow = 4)
rownames(ttable) = c("A", "B", "C", "D")
colnames(ttable) = c("A", "B", "C", "D")
edges = data.frame(ttable) %>%
rownames_to_column("source") %>%
gather(key = "target", value = "weight", -source)
edges = edges %>% mutate(Precip = netprecip,
Planting = selected_planting)
edgeoutput[[counter]] <- edges
counter = counter + 1
}
}
bind_rows(edgeoutput)
write.csv(x = bind_rows(edgeoutput),
"../data/msmfits.csv")
shiny::runApp('STM_Dynamic')
runApp('STM_Dynamic')
runApp('STM_Dynamic')
runApp('STM_Dynamic')
runApp('STM_Dynamic')
runApp('STM_Dynamic')
runApp('STM_Dynamic')
runApp('STM_Dynamic')
runApp('STM_Dynamic')
runApp('STM_Dynamic')
getwd()
msmfits <- read.csv("data/msmfits.csv")
runApp('STM_Dynamic')
runApp('STM_Dynamic')
runApp('STM_Dynamic')
list(unique(msmfits$Planting))
runApp('STM_Dynamic')
msmfits <- read.csv("../data/msmfits.csv", stringsAsFactors = FALSE)
msmfits <- read.csv("data/msmfits.csv", stringsAsFactors = FALSE)
# Define UI for application that draws a histogram
ui <- fluidPage(
titlePanel("State-Transition in California Grasslands"),
sidebarLayout(
sidebarPanel(h3("Select Covariates"),
helpText("Create demographic maps with
information from the 2010 US Census."),
selectInput("var",
label = "Choose a variable to display",
choices = list(unique(msmfits$Planting)),
selected = unique(msmfits$Planting)[1]),
sliderInput("range",
label = "Range of interest:",
min = 0, max = 100, value = c(0, 100))),
mainPanel(h1("main panel"),
p("Here I can add some more description"))
)
)
plantings <- unique(msmfits$Planting)
plantings
names(plantings)
list(plantings)
as.list(plantings)
plantings[1]
runApp('STM_Dynamic')
?sliderInput
runApp('STM_Dynamic')
runApp('STM_Dynamic')
runApp('STM_Dynamic')
runApp('STM_Dynamic')
runApp('STM_Dynamic')
runApp('STM_Dynamic')
runApp('STM_Dynamic')
runApp('STM_Dynamic')
runApp('STM_Dynamic')
runApp('STM_Dynamic')
runApp('STM_Dynamic')
runApp('STM_Dynamic')
runApp('STM_Dynamic')
runApp('STM_Dynamic')
runApp('STM_Dynamic')
runApp('STM_Dynamic')
runApp('STM_Dynamic')
runApp('STM_Dynamic')
runApp('STM_Dynamic')
runApp('STM_Dynamic')
runApp('STM_Dynamic')
runApp('STM_Dynamic')
edge_df
runApp('STM_Dynamic')
runApp('STM_Dynamic')
runApp('STM_Dynamic')
runApp('STM_Dynamic')
runApp('STM_Dynamic')
runApp('STM_Dynamic')
runApp('STM_Dynamic')
runApp('STM_Dynamic')
stmfits
msmfits
msmfits[1:16,]
plot_stm(msmfits[1:16,])
plot_stm(msmfits[1:16,-1])
write.csv(x = bind_rows(edgeoutput) %>% select(-X),
"../data/msmfits.csv")
bind_rows(edgeoutput)
runApp('STM_Dynamic')
plot_stm(msmfits[1:16,-1])
msmfits[1:16,-1]
msmfits[1:16,-1]
ttable
plot_stm <- function(edges){
nodes = data.frame(node_id = c("A", "B", "C", "D"),
cluster = c("I", "haven't", "assigned", "yet"),
stability = edges$weight[edges$source == edges$target])
net = graph_from_data_frame(d = edges, vertices = nodes, directed = TRUE)
net = simplify(net, remove.loops = T)
colors = rainbow(4, v = .75, s = .3)
V(net)$color = colors
E(net)$width <- E(net)$weight * 40
V(net)$size <- (V(net)$stability * 100)
V(net)$label <- round(V(net)$stability, 2)
V(net)$label.font=2
E(net)$label.font=2
graph_attr(net, "layout") <- layout_with_lgl(net)
plot(net,
edge.arrow.size = 1.5,
edge.curved = .5,
vertex.label.family = "sans",
edge.label.family = "sans",
edge.label.color = "black",
vertex.label.color = "black",
edge.label = round(E(net)$weight, 2),
margin = c(.5,.1,0,.1),
edge.color = "grey70",
main = "State Resilience and Transition Probabilities",
cex = 1.25)
legend(x=-1.7, y=-1.5, c("State 1: E. glaucus - S.pulchra",
"State 2: F. perennis - B. hordeaceous",
"State 3: E. caput-medusae - A. triuncialis",
"State 4: A. fatua - B. diandrus"), pch=21,
col="#777777",
pt.bg=colors, pt.cex=2, cex=.8, bty="n", ncol=1)
}
plot_stm(msmfits[1:16,-1])
plot_stm(msmfits[1:16,-1])
plot_stm(msmfits[1:16,-1])
plot_stm(msmfits[1:16,-1])
plot_stm(msmfits[1:16,-1])
plot_stm(msmfits[1:16,-1])
plot_stm(msmfits[1:16,-1])
plot_stm(msmfits[1:16,-1])
plot_stm(msmfits[1:16,-1])
plot_stm(msmfits[1:16,-1])
plot_stm(msmfits[1:16,-1])
plot_stm(msmfits[1:16,-1])
plot_stm(msmfits[1:16,-1])
runApp('STM_Dynamic')
runApp('STM_Dynamic')
runApp('STM_Dynamic')
runApp('STM_Dynamic')
